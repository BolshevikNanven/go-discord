// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: api/biz/biz.proto

package biz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BizService_GetSpaces_FullMethodName       = "/biz.BizService/GetSpaces"
	BizService_CreateSpace_FullMethodName     = "/biz.BizService/CreateSpace"
	BizService_UpdateSpace_FullMethodName     = "/biz.BizService/UpdateSpace"
	BizService_DeleteSpace_FullMethodName     = "/biz.BizService/DeleteSpace"
	BizService_JoinSpace_FullMethodName       = "/biz.BizService/JoinSpace"
	BizService_LeaveSpace_FullMethodName      = "/biz.BizService/LeaveSpace"
	BizService_GetChannels_FullMethodName     = "/biz.BizService/GetChannels"
	BizService_CreateChannel_FullMethodName   = "/biz.BizService/CreateChannel"
	BizService_UpdateChannel_FullMethodName   = "/biz.BizService/UpdateChannel"
	BizService_DeleteChannel_FullMethodName   = "/biz.BizService/DeleteChannel"
	BizService_JoinChannel_FullMethodName     = "/biz.BizService/JoinChannel"
	BizService_LeaveChannel_FullMethodName    = "/biz.BizService/LeaveChannel"
	BizService_IsSpaceMember_FullMethodName   = "/biz.BizService/IsSpaceMember"
	BizService_IsChannelMember_FullMethodName = "/biz.BizService/IsChannelMember"
	BizService_GetChannelIds_FullMethodName   = "/biz.BizService/GetChannelIds"
)

// BizServiceClient is the client API for BizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BizServiceClient interface {
	GetSpaces(ctx context.Context, in *GetSpacesRequest, opts ...grpc.CallOption) (*SpaceList, error)
	CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	JoinSpace(ctx context.Context, in *JoinSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	LeaveSpace(ctx context.Context, in *JoinSpaceRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (*ChannelList, error)
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*Channel, error)
	LeaveChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	IsSpaceMember(ctx context.Context, in *IsSpaceMemberRequest, opts ...grpc.CallOption) (*IsSpaceMemberResponse, error)
	IsChannelMember(ctx context.Context, in *IsChannelMemberRequest, opts ...grpc.CallOption) (*IsChannelMemberResponse, error)
	GetChannelIds(ctx context.Context, in *GetChannelIdsRequest, opts ...grpc.CallOption) (*GetChannelIdsResponse, error)
}

type bizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBizServiceClient(cc grpc.ClientConnInterface) BizServiceClient {
	return &bizServiceClient{cc}
}

func (c *bizServiceClient) GetSpaces(ctx context.Context, in *GetSpacesRequest, opts ...grpc.CallOption) (*SpaceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpaceList)
	err := c.cc.Invoke(ctx, BizService_GetSpaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Space)
	err := c.cc.Invoke(ctx, BizService_CreateSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Space)
	err := c.cc.Invoke(ctx, BizService_UpdateSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, BizService_DeleteSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) JoinSpace(ctx context.Context, in *JoinSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Space)
	err := c.cc.Invoke(ctx, BizService_JoinSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) LeaveSpace(ctx context.Context, in *JoinSpaceRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, BizService_LeaveSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (*ChannelList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelList)
	err := c.cc.Invoke(ctx, BizService_GetChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channel)
	err := c.cc.Invoke(ctx, BizService_CreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channel)
	err := c.cc.Invoke(ctx, BizService_UpdateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, BizService_DeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*Channel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channel)
	err := c.cc.Invoke(ctx, BizService_JoinChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) LeaveChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, BizService_LeaveChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) IsSpaceMember(ctx context.Context, in *IsSpaceMemberRequest, opts ...grpc.CallOption) (*IsSpaceMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsSpaceMemberResponse)
	err := c.cc.Invoke(ctx, BizService_IsSpaceMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) IsChannelMember(ctx context.Context, in *IsChannelMemberRequest, opts ...grpc.CallOption) (*IsChannelMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsChannelMemberResponse)
	err := c.cc.Invoke(ctx, BizService_IsChannelMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizServiceClient) GetChannelIds(ctx context.Context, in *GetChannelIdsRequest, opts ...grpc.CallOption) (*GetChannelIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelIdsResponse)
	err := c.cc.Invoke(ctx, BizService_GetChannelIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizServiceServer is the server API for BizService service.
// All implementations must embed UnimplementedBizServiceServer
// for forward compatibility.
type BizServiceServer interface {
	GetSpaces(context.Context, *GetSpacesRequest) (*SpaceList, error)
	CreateSpace(context.Context, *CreateSpaceRequest) (*Space, error)
	UpdateSpace(context.Context, *UpdateSpaceRequest) (*Space, error)
	DeleteSpace(context.Context, *DeleteSpaceRequest) (*SuccessResponse, error)
	JoinSpace(context.Context, *JoinSpaceRequest) (*Space, error)
	LeaveSpace(context.Context, *JoinSpaceRequest) (*SuccessResponse, error)
	GetChannels(context.Context, *GetChannelsRequest) (*ChannelList, error)
	CreateChannel(context.Context, *CreateChannelRequest) (*Channel, error)
	UpdateChannel(context.Context, *UpdateChannelRequest) (*Channel, error)
	DeleteChannel(context.Context, *DeleteChannelRequest) (*SuccessResponse, error)
	JoinChannel(context.Context, *JoinChannelRequest) (*Channel, error)
	LeaveChannel(context.Context, *JoinChannelRequest) (*SuccessResponse, error)
	IsSpaceMember(context.Context, *IsSpaceMemberRequest) (*IsSpaceMemberResponse, error)
	IsChannelMember(context.Context, *IsChannelMemberRequest) (*IsChannelMemberResponse, error)
	GetChannelIds(context.Context, *GetChannelIdsRequest) (*GetChannelIdsResponse, error)
	mustEmbedUnimplementedBizServiceServer()
}

// UnimplementedBizServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBizServiceServer struct{}

func (UnimplementedBizServiceServer) GetSpaces(context.Context, *GetSpacesRequest) (*SpaceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaces not implemented")
}
func (UnimplementedBizServiceServer) CreateSpace(context.Context, *CreateSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedBizServiceServer) UpdateSpace(context.Context, *UpdateSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpace not implemented")
}
func (UnimplementedBizServiceServer) DeleteSpace(context.Context, *DeleteSpaceRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedBizServiceServer) JoinSpace(context.Context, *JoinSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinSpace not implemented")
}
func (UnimplementedBizServiceServer) LeaveSpace(context.Context, *JoinSpaceRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveSpace not implemented")
}
func (UnimplementedBizServiceServer) GetChannels(context.Context, *GetChannelsRequest) (*ChannelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannels not implemented")
}
func (UnimplementedBizServiceServer) CreateChannel(context.Context, *CreateChannelRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedBizServiceServer) UpdateChannel(context.Context, *UpdateChannelRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedBizServiceServer) DeleteChannel(context.Context, *DeleteChannelRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedBizServiceServer) JoinChannel(context.Context, *JoinChannelRequest) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedBizServiceServer) LeaveChannel(context.Context, *JoinChannelRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (UnimplementedBizServiceServer) IsSpaceMember(context.Context, *IsSpaceMemberRequest) (*IsSpaceMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSpaceMember not implemented")
}
func (UnimplementedBizServiceServer) IsChannelMember(context.Context, *IsChannelMemberRequest) (*IsChannelMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsChannelMember not implemented")
}
func (UnimplementedBizServiceServer) GetChannelIds(context.Context, *GetChannelIdsRequest) (*GetChannelIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelIds not implemented")
}
func (UnimplementedBizServiceServer) mustEmbedUnimplementedBizServiceServer() {}
func (UnimplementedBizServiceServer) testEmbeddedByValue()                    {}

// UnsafeBizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BizServiceServer will
// result in compilation errors.
type UnsafeBizServiceServer interface {
	mustEmbedUnimplementedBizServiceServer()
}

func RegisterBizServiceServer(s grpc.ServiceRegistrar, srv BizServiceServer) {
	// If the following call pancis, it indicates UnimplementedBizServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BizService_ServiceDesc, srv)
}

func _BizService_GetSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).GetSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_GetSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).GetSpaces(ctx, req.(*GetSpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_CreateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).CreateSpace(ctx, req.(*CreateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_UpdateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).UpdateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_UpdateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).UpdateSpace(ctx, req.(*UpdateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_DeleteSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).DeleteSpace(ctx, req.(*DeleteSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_JoinSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).JoinSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_JoinSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).JoinSpace(ctx, req.(*JoinSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_LeaveSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).LeaveSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_LeaveSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).LeaveSpace(ctx, req.(*JoinSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_GetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).GetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_GetChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).GetChannels(ctx, req.(*GetChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_UpdateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).UpdateChannel(ctx, req.(*UpdateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_JoinChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).JoinChannel(ctx, req.(*JoinChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_LeaveChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).LeaveChannel(ctx, req.(*JoinChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_IsSpaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSpaceMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).IsSpaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_IsSpaceMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).IsSpaceMember(ctx, req.(*IsSpaceMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_IsChannelMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsChannelMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).IsChannelMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_IsChannelMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).IsChannelMember(ctx, req.(*IsChannelMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizService_GetChannelIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).GetChannelIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizService_GetChannelIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).GetChannelIds(ctx, req.(*GetChannelIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BizService_ServiceDesc is the grpc.ServiceDesc for BizService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BizService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biz.BizService",
	HandlerType: (*BizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpaces",
			Handler:    _BizService_GetSpaces_Handler,
		},
		{
			MethodName: "CreateSpace",
			Handler:    _BizService_CreateSpace_Handler,
		},
		{
			MethodName: "UpdateSpace",
			Handler:    _BizService_UpdateSpace_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _BizService_DeleteSpace_Handler,
		},
		{
			MethodName: "JoinSpace",
			Handler:    _BizService_JoinSpace_Handler,
		},
		{
			MethodName: "LeaveSpace",
			Handler:    _BizService_LeaveSpace_Handler,
		},
		{
			MethodName: "GetChannels",
			Handler:    _BizService_GetChannels_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _BizService_CreateChannel_Handler,
		},
		{
			MethodName: "UpdateChannel",
			Handler:    _BizService_UpdateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _BizService_DeleteChannel_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _BizService_JoinChannel_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _BizService_LeaveChannel_Handler,
		},
		{
			MethodName: "IsSpaceMember",
			Handler:    _BizService_IsSpaceMember_Handler,
		},
		{
			MethodName: "IsChannelMember",
			Handler:    _BizService_IsChannelMember_Handler,
		},
		{
			MethodName: "GetChannelIds",
			Handler:    _BizService_GetChannelIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/biz/biz.proto",
}
