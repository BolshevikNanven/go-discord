// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: api/im/im.proto

package im

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImService_AckMessages_FullMethodName       = "/im.ImService/AckMessages"
	ImService_GetInboxMessages_FullMethodName  = "/im.ImService/GetInboxMessages"
	ImService_AckChannelMessage_FullMethodName = "/im.ImService/AckChannelMessage"
	ImService_GetChannelInbox_FullMethodName   = "/im.ImService/GetChannelInbox"
	ImService_SendMessage_FullMethodName       = "/im.ImService/SendMessage"
	ImService_PullHistory_FullMethodName       = "/im.ImService/PullHistory"
)

// ImServiceClient is the client API for ImService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImServiceClient interface {
	AckMessages(ctx context.Context, in *AckMessagesRequest, opts ...grpc.CallOption) (*AckMessagesResponse, error)
	GetInboxMessages(ctx context.Context, in *GetInboxMessagesRequest, opts ...grpc.CallOption) (*GetInboxMessagesResponse, error)
	AckChannelMessage(ctx context.Context, in *AckChannelMessageRequest, opts ...grpc.CallOption) (*AckChannelMessageResponse, error)
	GetChannelInbox(ctx context.Context, in *GetChannelInboxRequest, opts ...grpc.CallOption) (*GetChannelInboxResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	PullHistory(ctx context.Context, in *PullHistoryRequest, opts ...grpc.CallOption) (*PullHistoryResponse, error)
}

type imServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImServiceClient(cc grpc.ClientConnInterface) ImServiceClient {
	return &imServiceClient{cc}
}

func (c *imServiceClient) AckMessages(ctx context.Context, in *AckMessagesRequest, opts ...grpc.CallOption) (*AckMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckMessagesResponse)
	err := c.cc.Invoke(ctx, ImService_AckMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServiceClient) GetInboxMessages(ctx context.Context, in *GetInboxMessagesRequest, opts ...grpc.CallOption) (*GetInboxMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInboxMessagesResponse)
	err := c.cc.Invoke(ctx, ImService_GetInboxMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServiceClient) AckChannelMessage(ctx context.Context, in *AckChannelMessageRequest, opts ...grpc.CallOption) (*AckChannelMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckChannelMessageResponse)
	err := c.cc.Invoke(ctx, ImService_AckChannelMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServiceClient) GetChannelInbox(ctx context.Context, in *GetChannelInboxRequest, opts ...grpc.CallOption) (*GetChannelInboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelInboxResponse)
	err := c.cc.Invoke(ctx, ImService_GetChannelInbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ImService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServiceClient) PullHistory(ctx context.Context, in *PullHistoryRequest, opts ...grpc.CallOption) (*PullHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullHistoryResponse)
	err := c.cc.Invoke(ctx, ImService_PullHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImServiceServer is the server API for ImService service.
// All implementations must embed UnimplementedImServiceServer
// for forward compatibility.
type ImServiceServer interface {
	AckMessages(context.Context, *AckMessagesRequest) (*AckMessagesResponse, error)
	GetInboxMessages(context.Context, *GetInboxMessagesRequest) (*GetInboxMessagesResponse, error)
	AckChannelMessage(context.Context, *AckChannelMessageRequest) (*AckChannelMessageResponse, error)
	GetChannelInbox(context.Context, *GetChannelInboxRequest) (*GetChannelInboxResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	PullHistory(context.Context, *PullHistoryRequest) (*PullHistoryResponse, error)
	mustEmbedUnimplementedImServiceServer()
}

// UnimplementedImServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImServiceServer struct{}

func (UnimplementedImServiceServer) AckMessages(context.Context, *AckMessagesRequest) (*AckMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckMessages not implemented")
}
func (UnimplementedImServiceServer) GetInboxMessages(context.Context, *GetInboxMessagesRequest) (*GetInboxMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboxMessages not implemented")
}
func (UnimplementedImServiceServer) AckChannelMessage(context.Context, *AckChannelMessageRequest) (*AckChannelMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckChannelMessage not implemented")
}
func (UnimplementedImServiceServer) GetChannelInbox(context.Context, *GetChannelInboxRequest) (*GetChannelInboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInbox not implemented")
}
func (UnimplementedImServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedImServiceServer) PullHistory(context.Context, *PullHistoryRequest) (*PullHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullHistory not implemented")
}
func (UnimplementedImServiceServer) mustEmbedUnimplementedImServiceServer() {}
func (UnimplementedImServiceServer) testEmbeddedByValue()                   {}

// UnsafeImServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImServiceServer will
// result in compilation errors.
type UnsafeImServiceServer interface {
	mustEmbedUnimplementedImServiceServer()
}

func RegisterImServiceServer(s grpc.ServiceRegistrar, srv ImServiceServer) {
	// If the following call pancis, it indicates UnimplementedImServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImService_ServiceDesc, srv)
}

func _ImService_AckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServiceServer).AckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImService_AckMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServiceServer).AckMessages(ctx, req.(*AckMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImService_GetInboxMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboxMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServiceServer).GetInboxMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImService_GetInboxMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServiceServer).GetInboxMessages(ctx, req.(*GetInboxMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImService_AckChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckChannelMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServiceServer).AckChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImService_AckChannelMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServiceServer).AckChannelMessage(ctx, req.(*AckChannelMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImService_GetChannelInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelInboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServiceServer).GetChannelInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImService_GetChannelInbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServiceServer).GetChannelInbox(ctx, req.(*GetChannelInboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImService_PullHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServiceServer).PullHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImService_PullHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServiceServer).PullHistory(ctx, req.(*PullHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImService_ServiceDesc is the grpc.ServiceDesc for ImService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "im.ImService",
	HandlerType: (*ImServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AckMessages",
			Handler:    _ImService_AckMessages_Handler,
		},
		{
			MethodName: "GetInboxMessages",
			Handler:    _ImService_GetInboxMessages_Handler,
		},
		{
			MethodName: "AckChannelMessage",
			Handler:    _ImService_AckChannelMessage_Handler,
		},
		{
			MethodName: "GetChannelInbox",
			Handler:    _ImService_GetChannelInbox_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ImService_SendMessage_Handler,
		},
		{
			MethodName: "PullHistory",
			Handler:    _ImService_PullHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/im/im.proto",
}
