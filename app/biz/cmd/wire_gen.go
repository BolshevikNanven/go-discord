// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"discord/app/biz/internal"
	"discord/app/biz/internal/config"
	"discord/app/biz/internal/repository"
	"discord/data"
	"discord/pkg/snowflakeutil"
	"sync"
)

// Injectors from wire.go:

func runApp(wg *sync.WaitGroup) chan struct{} {
	configConfig := config.NewConfig()
	databaseConfig := config.NewDatabase(configConfig)
	db := data.NewDatabase(databaseConfig)
	snowflakeutilConfig := config.NewSnowflakeConfig(configConfig)
	node := snowflakeutil.New(snowflakeutilConfig)
	redisConfig := config.NewRedisConfig(configConfig)
	client := data.NewRedis(redisConfig)
	spaceRepository := repository.NewSpaceRepo(db, node, client)
	channelRepository := repository.NewChannelRepo(db, node, client)
	spaceUserRepository := repository.NewSpaceUserRepo(db, client)
	channelUserRepository := repository.NewChannelUserRepo(db, client)
	bizServiceServer := internal.NewServer(spaceRepository, channelRepository, spaceUserRepository, channelUserRepository)
	v := newApp(wg, bizServiceServer, configConfig)
	return v
}
