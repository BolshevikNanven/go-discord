// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"discord/app/connector/internal"
	"discord/app/connector/internal/client"
	"discord/app/connector/internal/config"
	"discord/app/connector/internal/hub"
	"discord/app/connector/internal/repository"
	"discord/data"
	"sync"
)

// Injectors from wire.go:

func runApp(wg *sync.WaitGroup) chan struct{} {
	logger := internal.NewLogger()
	configConfig := config.NewConfig()
	redisConfig := config.NewRedisConfig(configConfig)
	redisClient := data.NewRedis(redisConfig)
	userRepository := repository.NewUserRepository(redisClient)
	channelRepository := repository.NewChannelRepository(redisClient)
	bizClientPool := client.NewBizClientPool()
	hubHub := hub.NewHub(configConfig, userRepository, channelRepository, bizClientPool)
	jwtutilConfig := config.NewJwtConfig(configConfig)
	webSocketServer := internal.NewWebSocketServer(hubHub, jwtutilConfig)
	connectorServiceServer := internal.NewRpcServer(hubHub)
	v := newApp(wg, logger, configConfig, hubHub, webSocketServer, connectorServiceServer)
	return v
}
