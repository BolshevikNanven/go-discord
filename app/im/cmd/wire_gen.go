// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"discord/app/im/internal"
	"discord/app/im/internal/client"
	"discord/app/im/internal/config"
	"discord/app/im/internal/repository"
	"discord/data"
	"discord/pkg/snowflakeutil"
	"sync"
)

// Injectors from wire.go:

func runApp(wg *sync.WaitGroup) chan struct{} {
	logger := internal.NewLogger()
	configConfig := config.NewConfig()
	databaseConfig := config.NewDatabaseConfig(configConfig)
	db := data.NewDatabase(databaseConfig)
	messageRepository := repository.NewMessageRepository(db)
	redisConfig := config.NewRedisConfig(configConfig)
	redisClient := data.NewRedis(redisConfig)
	inboxRepository := repository.NewInboxRepository(redisClient, db)
	rocketMQConfig := config.NewRocketMQConfig(configConfig)
	producer := data.NewRocketMQProducer(rocketMQConfig)
	mqRepository := repository.NewMqRepository(producer, logger)
	bizClientPool := client.NewBizClientPool()
	snowflakeutilConfig := config.NewSnowflakeConfig(configConfig)
	node := snowflakeutil.New(snowflakeutilConfig)
	imServiceServer := internal.NewServer(messageRepository, inboxRepository, mqRepository, bizClientPool, node)
	v := newApp(wg, logger, imServiceServer, configConfig)
	return v
}
