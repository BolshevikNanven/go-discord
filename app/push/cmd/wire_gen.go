// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"discord/app/push/internal"
	"discord/app/push/internal/client"
	"discord/app/push/internal/config"
	"discord/app/push/internal/repository"
	"discord/data"
	"sync"
)

// Injectors from wire.go:

func runApp(wg *sync.WaitGroup) chan struct{} {
	logger := internal.NewLogger()
	configConfig := config.NewConfig()
	etcdConfig := config.NewEtcdConfig(configConfig)
	connectorClientPool := client.NewConnectorClientPool(logger, etcdConfig)
	rocketMQConfig := config.NewRocketMQConfig(configConfig)
	simpleConsumer := data.NewRocketMQConsumer(rocketMQConfig)
	redisConfig := config.NewRedisConfig(configConfig)
	redisClient := data.NewRedis(redisConfig)
	inboxRepository := repository.NewInboxRepository(redisClient)
	userRepository := repository.NewUserRepository(redisClient)
	channelRepository := repository.NewChannelRepository(redisClient)
	databaseConfig := config.NewDatabaseConfig(configConfig)
	db := data.NewDatabase(databaseConfig)
	messageRepository := repository.NewMessageRepository(db)
	server := internal.NewServer(logger, connectorClientPool, simpleConsumer, inboxRepository, userRepository, channelRepository, messageRepository)
	v := newApp(wg, logger, server, configConfig)
	return v
}
